{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock, createElementVNode as _createElementVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container mt-4\"\n};\nconst _hoisted_2 = {\n  class: \"row\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_TicketForm = _resolveComponent(\"TicketForm\");\n  const _component_CardFilter = _resolveComponent(\"CardFilter\", true);\n  const _component_TicketCard = _resolveComponent(\"TicketCard\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createCommentVNode(\" Ticket creation form \"), _createVNode(_component_TicketForm, {\n    onTicketCreated: $options.fetchTickets\n  }, null, 8 /* PROPS */, [\"onTicketCreated\"]), _createCommentVNode(\" Card filter \"), _createVNode(_component_CardFilter, {\n    onFilterUpdated: $options.filterTickets,\n    onSortUpdated: $options.sortTickets\n  }, null, 8 /* PROPS */, [\"onFilterUpdated\", \"onSortUpdated\"]), _createCommentVNode(\" Ticket list \"), _createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.filteredTickets, ticket => {\n    return _openBlock(), _createBlock(_component_TicketCard, {\n      key: ticket.id,\n      ticket: ticket,\n      onTicketUpdated: $options.fetchTickets,\n      class: \"col-md-4 mb-4\"\n    }, null, 8 /* PROPS */, [\"ticket\", \"onTicketUpdated\"]);\n  }), 128 /* KEYED_FRAGMENT */))])])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_createCommentVNode","_createVNode","_component_TicketForm","onTicketCreated","$options","fetchTickets","_component_CardFilter","onFilterUpdated","filterTickets","onSortUpdated","sortTickets","_createElementVNode","_hoisted_1","_hoisted_2","_Fragment","_renderList","$data","filteredTickets","ticket","_createBlock","_component_TicketCard","key","id","onTicketUpdated"],"sources":["C:\\Users\\uSeR\\Desktop\\help-desk\\Frontend\\ticket-page\\src\\components\\CardFilter.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <!-- Ticket creation form -->\r\n      <TicketForm @ticket-created=\"fetchTickets\" />\r\n  \r\n      <!-- Card filter -->\r\n      <CardFilter \r\n        @filter-updated=\"filterTickets\" \r\n        @sort-updated=\"sortTickets\" \r\n      />\r\n  \r\n      <!-- Ticket list -->\r\n      <div class=\"container mt-4\">\r\n        <div class=\"row\">\r\n          <TicketCard \r\n            v-for=\"ticket in filteredTickets\" \r\n            :key=\"ticket.id\" \r\n            :ticket=\"ticket\" \r\n            @ticket-updated=\"fetchTickets\" \r\n            class=\"col-md-4 mb-4\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import axios from \"axios\";\r\n  import TicketForm from \"@/components/TicketForm.vue\";\r\n  import TicketCard from \"@/components/TicketCard.vue\";\r\n  import CardFilter from \"@/components/CardFilter.vue\";\r\n  \r\n  export default {\r\n    components: {\r\n      TicketForm,\r\n      CardFilter,\r\n      TicketCard,\r\n    },\r\n    data() {\r\n      return {\r\n        tickets: [], // Holds all tickets from the backend\r\n        filteredTickets: [], // Holds filtered and sorted tickets\r\n        filterStatus: \"\", // Currently selected status filter\r\n        sortField: \"created_at\", // Currently selected sort field\r\n      };\r\n    },\r\n    mounted() {\r\n      this.fetchTickets(); // Fetch tickets when the component loads\r\n    },\r\n    methods: {\r\n      async fetchTickets() {\r\n        try {\r\n          const response = await axios.get(\"http://127.0.0.1:5000/tickets\");\r\n          this.tickets = response.data;\r\n          this.applyFiltersAndSort();\r\n        } catch (error) {\r\n          console.error(\"Error fetching tickets:\", error);\r\n        }\r\n      },\r\n      filterTickets(status) {\r\n        this.filterStatus = status;\r\n        this.applyFiltersAndSort();\r\n      },\r\n      sortTickets(field) {\r\n        this.sortField = field;\r\n        this.applyFiltersAndSort();\r\n      },\r\n      applyFiltersAndSort() {\r\n        // Filter tickets by status\r\n        let tickets = this.filterStatus\r\n          ? this.tickets.filter((ticket) => ticket.status === this.filterStatus)\r\n          : [...this.tickets];\r\n  \r\n        // Sort tickets\r\n        if (this.sortField === \"status\") {\r\n          const statusOrder = {\r\n            Pending: 1,\r\n            Accepted: 2,\r\n            Resolved: 3,\r\n            Rejected: 4,\r\n          };\r\n          tickets.sort(\r\n            (a, b) => statusOrder[a.status] - statusOrder[b.status]\r\n          );\r\n        } else {\r\n          tickets.sort(\r\n            (a, b) => new Date(a[this.sortField]) - new Date(b[this.sortField])\r\n          );\r\n        }\r\n  \r\n        this.filteredTickets = tickets;\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .card-filter {\r\n    background-color: #f8f9fa;\r\n    padding: 10px;\r\n    border: 1px solid #ddd;\r\n    border-radius: 5px;\r\n    margin-top: 20px;\r\n  }\r\n  </style>\r\n  "],"mappings":";;EAYWA,KAAK,EAAC;AAAgB;;EACpBA,KAAK,EAAC;AAAK;;;;;uBAZpBC,mBAAA,CAsBM,cArBJC,mBAAA,0BAA6B,EAC7BC,YAAA,CAA6CC,qBAAA;IAAhCC,eAAc,EAAEC,QAAA,CAAAC;EAAY,8CAEzCL,mBAAA,iBAAoB,EACpBC,YAAA,CAGEK,qBAAA;IAFCC,eAAc,EAAEH,QAAA,CAAAI,aAAa;IAC7BC,aAAY,EAAEL,QAAA,CAAAM;iEAGjBV,mBAAA,iBAAoB,EACpBW,mBAAA,CAUM,OAVNC,UAUM,GATJD,mBAAA,CAQM,OARNE,UAQM,I,kBAPJd,mBAAA,CAMEe,SAAA,QApBZC,WAAA,CAe6BC,KAAA,CAAAC,eAAe,EAAzBC,MAAM;yBADfC,YAAA,CAMEC,qBAAA;MAJCC,GAAG,EAAEH,MAAM,CAACI,EAAE;MACdJ,MAAM,EAAEA,MAAM;MACdK,eAAc,EAAEnB,QAAA,CAAAC,YAAY;MAC7BP,KAAK,EAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}