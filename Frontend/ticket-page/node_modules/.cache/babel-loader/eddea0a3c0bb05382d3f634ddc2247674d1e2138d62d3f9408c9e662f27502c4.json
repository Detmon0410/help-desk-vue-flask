{"ast":null,"code":"import \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport axios from \"axios\";\nimport TicketForm from \"@/components/TicketForm.vue\";\nimport TicketCard from \"@/components/TicketCard.vue\";\nimport CardFilter from \"@/components/CardFilter.vue\";\nexport default {\n  components: {\n    TicketForm,\n    CardFilter,\n    TicketCard\n  },\n  data() {\n    return {\n      tickets: [],\n      // Holds the list of all tickets\n      filterStatus: \"\",\n      // Tracks the selected status filter\n      sortField: \"created_at\",\n      // Tracks the selected sort field\n      currentPage: 1,\n      // Tracks the current page\n      ticketsPerPage: 9 // Number of tickets to display per page\n    };\n  },\n  computed: {\n    filteredTickets() {\n      let filtered = [...this.tickets];\n\n      // Apply status filter\n      if (this.filterStatus) {\n        filtered = filtered.filter(ticket => ticket.status === this.filterStatus);\n      }\n\n      // Apply sorting logic\n      if (this.sortField === \"status\") {\n        const statusOrder = {\n          Pending: 1,\n          Accepted: 2,\n          Resolved: 3,\n          Rejected: 4\n        };\n        filtered.sort((a, b) => statusOrder[a.status] - statusOrder[b.status]);\n      } else {\n        // Sort by created_at, showing all tickets, even those with null/undefined updated_at\n        if (this.sortField === \"created_at\") {\n          filtered.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));\n        } else if (this.sortField === \"updated_at_old\") {\n          filtered.sort((a, b) => new Date(a.created_at) - new Date(b.created_at));\n        }\n        // Sort by updated_at, excluding tickets with null/undefined updated_at\n        else if (this.sortField === \"updated_at\") {\n          filtered = filtered.filter(ticket => ticket.updated_at !== null && ticket.updated_at !== undefined);\n          filtered.sort((a, b) => new Date(b.updated_at) - new Date(a.updated_at));\n        } else if (this.sortField === \"updated_at_old\") {\n          filtered = filtered.filter(ticket => ticket.updated_at !== null && ticket.updated_at !== undefined);\n          filtered.sort((a, b) => new Date(a.updated_at) - new Date(b.updated_at)); // Older updates first\n        }\n      }\n      return filtered;\n    },\n    // Paginate the filtered tickets\n    paginatedTickets() {\n      const startIndex = (this.currentPage - 1) * this.ticketsPerPage;\n      return this.filteredTickets.slice(startIndex, startIndex + this.ticketsPerPage);\n    },\n    // Calculate total pages based on ticketsPerPage\n    totalPages() {\n      return Math.ceil(this.filteredTickets.length / this.ticketsPerPage);\n    }\n  },\n  mounted() {\n    this.fetchTickets(); // Fetch tickets when the component is mounted\n  },\n  methods: {\n    async fetchTickets() {\n      try {\n        const response = await axios.get(\"http://127.0.0.1:5000/tickets\");\n        this.tickets = response.data; // Populate the tickets array with API data\n      } catch (error) {\n        console.error(\"Error fetching tickets:\", error);\n      }\n    },\n    applyFilter(status) {\n      this.filterStatus = status; // Update the filter status based on CardFilter input\n    },\n    applySort(field) {\n      this.sortField = field; // Update the sort field based on CardFilter input\n    },\n    // Move to the next page\n    goToNextPage() {\n      if (this.currentPage < this.totalPages) {\n        this.currentPage++;\n      }\n    },\n    // Move to the previous page\n    goToPreviousPage() {\n      if (this.currentPage > 1) {\n        this.currentPage--;\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","TicketForm","TicketCard","CardFilter","components","data","tickets","filterStatus","sortField","currentPage","ticketsPerPage","computed","filteredTickets","filtered","filter","ticket","status","statusOrder","Pending","Accepted","Resolved","Rejected","sort","a","b","Date","created_at","updated_at","undefined","paginatedTickets","startIndex","slice","totalPages","Math","ceil","length","mounted","fetchTickets","methods","response","get","error","console","applyFilter","applySort","field","goToNextPage","goToPreviousPage"],"sources":["C:\\Users\\uSeR\\Desktop\\help-desk\\Frontend\\ticket-page\\src\\views\\TicketHome.vue"],"sourcesContent":["<template>\r\n  <div class=\"page-container\">\r\n    <!-- Ticket creation form -->\r\n    <TicketForm @ticket-created=\"fetchTickets\" />\r\n\r\n    <!-- Card Filter for sorting and filtering -->\r\n    <CardFilter \r\n      @filter-updated=\"applyFilter\" \r\n      @sort-updated=\"applySort\" \r\n    />\r\n\r\n    <!-- Ticket list -->\r\n    <div class=\"container mt-4\">\r\n      <div class=\"row\">\r\n        <TicketCard \r\n          v-for=\"ticket in paginatedTickets\" \r\n          :key=\"ticket.id\" \r\n          :ticket=\"ticket\" \r\n          @ticket-updated=\"fetchTickets\" \r\n          class=\"col-md-4 mb-4\"\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Pagination Controls -->\r\n    <div class=\"pagination-container text-center mt-4\">\r\n      <button \r\n        class=\"btn btn-primary\" \r\n        @click=\"goToPreviousPage\" \r\n        :disabled=\"currentPage === 1\"\r\n      >\r\n        Previous\r\n      </button>\r\n      <span class=\"mx-3\">Page {{ currentPage }} of {{ totalPages }}</span>\r\n      <button \r\n        class=\"btn btn-primary\" \r\n        @click=\"goToNextPage\" \r\n        :disabled=\"currentPage === totalPages\"\r\n      >\r\n        Next\r\n      </button>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport axios from \"axios\";\r\nimport TicketForm from \"@/components/TicketForm.vue\";\r\nimport TicketCard from \"@/components/TicketCard.vue\";\r\nimport CardFilter from \"@/components/CardFilter.vue\";\r\n\r\nexport default {\r\n  components: {\r\n    TicketForm,\r\n    CardFilter,\r\n    TicketCard,\r\n  },\r\n  data() {\r\n    return {\r\n      tickets: [], // Holds the list of all tickets\r\n      filterStatus: \"\", // Tracks the selected status filter\r\n      sortField: \"created_at\", // Tracks the selected sort field\r\n      currentPage: 1, // Tracks the current page\r\n      ticketsPerPage: 9, // Number of tickets to display per page\r\n    };\r\n  },\r\n  computed: {\r\n  filteredTickets() {\r\n    let filtered = [...this.tickets];\r\n\r\n    // Apply status filter\r\n    if (this.filterStatus) {\r\n      filtered = filtered.filter(ticket => ticket.status === this.filterStatus);\r\n    }\r\n\r\n    // Apply sorting logic\r\n    if (this.sortField === \"status\") {\r\n      const statusOrder = { Pending: 1, Accepted: 2, Resolved: 3, Rejected: 4 };\r\n      filtered.sort((a, b) => statusOrder[a.status] - statusOrder[b.status]);\r\n    } else {\r\n      // Sort by created_at, showing all tickets, even those with null/undefined updated_at\r\n      if (this.sortField === \"created_at\") {\r\n        filtered.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));\r\n      } \r\n      else if (this.sortField === \"updated_at_old\") {\r\n        filtered.sort((a, b) => new Date(a.created_at) - new Date(b.created_at));\r\n      }\r\n      // Sort by updated_at, excluding tickets with null/undefined updated_at\r\n      else if (this.sortField === \"updated_at\") {\r\n        filtered = filtered.filter(ticket => ticket.updated_at !== null && ticket.updated_at !== undefined);\r\n        filtered.sort((a, b) => new Date(b.updated_at) - new Date(a.updated_at));\r\n      }\r\n      else if (this.sortField === \"updated_at_old\") {\r\n        filtered = filtered.filter(ticket => ticket.updated_at !== null && ticket.updated_at !== undefined);\r\n        filtered.sort((a, b) => new Date(a.updated_at) - new Date(b.updated_at)); // Older updates first\r\n      }\r\n    }\r\n\r\n    return filtered;\r\n  },\r\n  // Paginate the filtered tickets\r\n  paginatedTickets() {\r\n    const startIndex = (this.currentPage - 1) * this.ticketsPerPage;\r\n    return this.filteredTickets.slice(startIndex, startIndex + this.ticketsPerPage);\r\n  },\r\n  // Calculate total pages based on ticketsPerPage\r\n  totalPages() {\r\n    return Math.ceil(this.filteredTickets.length / this.ticketsPerPage);\r\n  }\r\n},\r\n  mounted() {\r\n    this.fetchTickets(); // Fetch tickets when the component is mounted\r\n  },\r\n  methods: {\r\n    async fetchTickets() {\r\n      try {\r\n        const response = await axios.get(\"http://127.0.0.1:5000/tickets\");\r\n        this.tickets = response.data; // Populate the tickets array with API data\r\n      } catch (error) {\r\n        console.error(\"Error fetching tickets:\", error);\r\n      }\r\n    },\r\n    applyFilter(status) {\r\n      this.filterStatus = status; // Update the filter status based on CardFilter input\r\n    },\r\n    applySort(field) {\r\n      this.sortField = field; // Update the sort field based on CardFilter input\r\n    },\r\n    // Move to the next page\r\n    goToNextPage() {\r\n      if (this.currentPage < this.totalPages) {\r\n        this.currentPage++;\r\n      }\r\n    },\r\n    // Move to the previous page\r\n    goToPreviousPage() {\r\n      if (this.currentPage > 1) {\r\n        this.currentPage--;\r\n      }\r\n    }\r\n  },\r\n};\r\n</script>\r\n<style scoped>\r\n.page-container {\r\n  padding-top: 40px; /* Adds space at the top of the page */\r\n  padding-bottom: 40px; /* Adds space at the bottom of the page */\r\n}\r\n\r\n.ticket-list {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 20px;\r\n}\r\n\r\n.pagination-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\nbutton {\r\n  margin: 0 10px;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}