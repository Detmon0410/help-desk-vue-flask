{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock, createElementVNode as _createElementVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container mt-4\"\n};\nconst _hoisted_2 = {\n  class: \"row\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_TicketForm = _resolveComponent(\"TicketForm\");\n  const _component_CardFilter = _resolveComponent(\"CardFilter\");\n  const _component_TicketCard = _resolveComponent(\"TicketCard\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createCommentVNode(\" Ticket creation form \"), _createVNode(_component_TicketForm, {\n    onTicketCreated: $options.fetchTickets\n  }, null, 8 /* PROPS */, [\"onTicketCreated\"]), _createCommentVNode(\" Card Filter for sorting and filtering \"), _createVNode(_component_CardFilter, {\n    onFilterUpdated: $options.applyFilter,\n    onSortUpdated: $options.applySort\n  }, null, 8 /* PROPS */, [\"onFilterUpdated\", \"onSortUpdated\"]), _createCommentVNode(\" Ticket list \"), _createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.filteredTickets, ticket => {\n    return _openBlock(), _createBlock(_component_TicketCard, {\n      key: ticket.id,\n      ticket: ticket,\n      onTicketUpdated: $options.fetchTickets,\n      class: \"col-md-4 mb-4\"\n    }, null, 8 /* PROPS */, [\"ticket\", \"onTicketUpdated\"]);\n  }), 128 /* KEYED_FRAGMENT */))])])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_createCommentVNode","_createVNode","_component_TicketForm","onTicketCreated","$options","fetchTickets","_component_CardFilter","onFilterUpdated","applyFilter","onSortUpdated","applySort","_createElementVNode","_hoisted_1","_hoisted_2","_Fragment","_renderList","filteredTickets","ticket","_createBlock","_component_TicketCard","key","id","onTicketUpdated"],"sources":["C:\\Users\\uSeR\\Desktop\\help-desk\\Frontend\\ticket-page\\src\\views\\TicketHome.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <!-- Ticket creation form -->\r\n    <TicketForm @ticket-created=\"fetchTickets\" />\r\n\r\n    <!-- Card Filter for sorting and filtering -->\r\n    <CardFilter \r\n      @filter-updated=\"applyFilter\" \r\n      @sort-updated=\"applySort\" \r\n    />\r\n\r\n    <!-- Ticket list -->\r\n    <div class=\"container mt-4\">\r\n      <div class=\"row\">\r\n        <TicketCard \r\n          v-for=\"ticket in filteredTickets\" \r\n          :key=\"ticket.id\" \r\n          :ticket=\"ticket\" \r\n          @ticket-updated=\"fetchTickets\" \r\n          class=\"col-md-4 mb-4\"\r\n        />\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\nimport TicketForm from \"@/components/TicketForm.vue\";\r\nimport TicketCard from \"@/components/TicketCard.vue\";\r\nimport CardFilter from \"@/components/CardFilter.vue\";\r\n\r\nexport default {\r\n  components: {\r\n    TicketForm,\r\n    CardFilter,\r\n    TicketCard,\r\n  },\r\n  data() {\r\n    return {\r\n      tickets: [], // Holds the list of all tickets\r\n      filterStatus: \"\", // Tracks the selected status filter\r\n      sortField: \"created_at\", // Tracks the selected sort field\r\n    };\r\n  },\r\n  computed: {\r\n    filteredTickets() {\r\n      let filtered = [...this.tickets];\r\n\r\n      // Apply status filter\r\n      if (this.filterStatus) {\r\n        filtered = filtered.filter(ticket => ticket.status === this.filterStatus);\r\n      }\r\n\r\n      // Apply sorting logic\r\n      if (this.sortField === \"status\") {\r\n        const statusOrder = { Pending: 1, Accepted: 2, Resolved: 3, Rejected: 4 };\r\n        filtered.sort((a, b) => statusOrder[a.status] - statusOrder[b.status]);\r\n      } else {\r\n        // Sort by date fields (created_at or updated_at)\r\n        filtered.sort((a, b) => new Date(b[this.sortField]) - new Date(a[this.sortField]));\r\n      }\r\n\r\n      return filtered;\r\n    },\r\n  },\r\n  mounted() {\r\n    this.fetchTickets(); // Fetch tickets when the component is mounted\r\n  },\r\n  methods: {\r\n    async fetchTickets() {\r\n      try {\r\n        const response = await axios.get(\"http://127.0.0.1:5000/tickets\");\r\n        this.tickets = response.data; // Populate the tickets array with API data\r\n      } catch (error) {\r\n        console.error(\"Error fetching tickets:\", error);\r\n      }\r\n    },\r\n    applyFilter(status) {\r\n      this.filterStatus = status; // Update the filter status based on CardFilter input\r\n    },\r\n    applySort(field) {\r\n      this.sortField = field; // Update the sort field based on CardFilter input\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Styling for the ticket cards */\r\n.ticket-list {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 20px;\r\n  \r\n}\r\n</style>\r\n"],"mappings":";;EAYSA,KAAK,EAAC;AAAgB;;EACpBA,KAAK,EAAC;AAAK;;;;;uBAZpBC,mBAAA,CAsBM,cArBJC,mBAAA,0BAA6B,EAC7BC,YAAA,CAA6CC,qBAAA;IAAhCC,eAAc,EAAEC,QAAA,CAAAC;EAAY,8CAEzCL,mBAAA,2CAA8C,EAC9CC,YAAA,CAGEK,qBAAA;IAFCC,eAAc,EAAEH,QAAA,CAAAI,WAAW;IAC3BC,aAAY,EAAEL,QAAA,CAAAM;iEAGjBV,mBAAA,iBAAoB,EACpBW,mBAAA,CAUM,OAVNC,UAUM,GATJD,mBAAA,CAQM,OARNE,UAQM,I,kBAPJd,mBAAA,CAMEe,SAAA,QApBVC,WAAA,CAe2BX,QAAA,CAAAY,eAAe,EAAzBC,MAAM;yBADfC,YAAA,CAMEC,qBAAA;MAJCC,GAAG,EAAEH,MAAM,CAACI,EAAE;MACdJ,MAAM,EAAEA,MAAM;MACdK,eAAc,EAAElB,QAAA,CAAAC,YAAY;MAC7BP,KAAK,EAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}