{"ast":null,"code":"import \"core-js/modules/esnext.iterator.map.js\";\nimport axios from \"axios\";\nexport default {\n  data() {\n    return {\n      tickets: [],\n      // List of tickets fetched from the backend\n      editingTicket: null // Ticket being edited\n    };\n  },\n  methods: {\n    // Fetch tickets from the backend\n    async fetchTickets() {\n      try {\n        const response = await axios.get(\"http://127.0.0.1:5000/tickets\");\n        this.tickets = response.data;\n      } catch (error) {\n        console.error(\"Error fetching tickets:\", error);\n      }\n    },\n    // Start editing a ticket\n    editTicket(ticket) {\n      this.editingTicket = {\n        ...ticket\n      }; // Make a copy of the ticket\n    },\n    // Submit edited ticket\n    async submitEdit(ticket) {\n      try {\n        const response = await axios.put(`http://127.0.0.1:5000/tickets/${ticket.id}`, {\n          status: this.editingTicket.status\n        });\n        // Update the tickets list with the new data\n        this.tickets = this.tickets.map(t => t.id === response.data.id ? response.data : t);\n        this.editingTicket = null; // Reset editing state\n      } catch (error) {\n        console.error(\"Error updating ticket:\", error);\n      }\n    },\n    // Cancel editing\n    cancelEdit() {\n      this.editingTicket = null;\n    }\n  },\n  mounted() {\n    // Fetch tickets when the component is mounted\n    this.fetchTickets();\n  }\n};","map":{"version":3,"names":["axios","data","tickets","editingTicket","methods","fetchTickets","response","get","error","console","editTicket","ticket","submitEdit","put","id","status","map","t","cancelEdit","mounted"],"sources":["C:\\Users\\uSeR\\Desktop\\help-desk\\Frontend\\ticket-page\\src\\views\\TicketHome.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h1>Tickets</h1>\r\n    <div class=\"ticket-list\">\r\n      <div\r\n        v-for=\"ticket in tickets\"\r\n        :key=\"ticket.id\"\r\n        class=\"ticket-card\"\r\n        @click=\"editTicket(ticket)\"\r\n      >\r\n        <div v-if=\"editingTicket?.id === ticket.id\">\r\n          <input\r\n            type=\"text\"\r\n            v-model=\"editingTicket.status\"\r\n            class=\"status-input\"\r\n          />\r\n          <button @click.stop=\"submitEdit(ticket)\">Submit</button>\r\n          <button @click.stop=\"cancelEdit\">Cancel</button>\r\n        </div>\r\n        <div v-else>\r\n          <h2>{{ ticket.title }}</h2>\r\n          <p>{{ ticket.description }}</p>\r\n          <p><strong>Status:</strong> {{ ticket.status }}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      tickets: [], // List of tickets fetched from the backend\r\n      editingTicket: null, // Ticket being edited\r\n    };\r\n  },\r\n  methods: {\r\n    // Fetch tickets from the backend\r\n    async fetchTickets() {\r\n      try {\r\n        const response = await axios.get(\"http://127.0.0.1:5000/tickets\");\r\n        this.tickets = response.data;\r\n      } catch (error) {\r\n        console.error(\"Error fetching tickets:\", error);\r\n      }\r\n    },\r\n    // Start editing a ticket\r\n    editTicket(ticket) {\r\n      this.editingTicket = { ...ticket }; // Make a copy of the ticket\r\n    },\r\n    // Submit edited ticket\r\n    async submitEdit(ticket) {\r\n      try {\r\n        const response = await axios.put(\r\n          `http://127.0.0.1:5000/tickets/${ticket.id}`,\r\n          { status: this.editingTicket.status }\r\n        );\r\n        // Update the tickets list with the new data\r\n        this.tickets = this.tickets.map((t) =>\r\n          t.id === response.data.id ? response.data : t\r\n        );\r\n        this.editingTicket = null; // Reset editing state\r\n      } catch (error) {\r\n        console.error(\"Error updating ticket:\", error);\r\n      }\r\n    },\r\n    // Cancel editing\r\n    cancelEdit() {\r\n      this.editingTicket = null;\r\n    },\r\n  },\r\n  mounted() {\r\n    // Fetch tickets when the component is mounted\r\n    this.fetchTickets();\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.ticket-list {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 16px;\r\n}\r\n\r\n.ticket-card {\r\n  border: 1px solid #ccc;\r\n  padding: 16px;\r\n  width: 300px;\r\n  cursor: pointer;\r\n  transition: transform 0.2s;\r\n}\r\n\r\n.ticket-card:hover {\r\n  transform: scale(1.05);\r\n}\r\n\r\n.status-input {\r\n  margin-bottom: 8px;\r\n}\r\n\r\nbutton {\r\n  margin-right: 8px;\r\n}\r\n</style>\r\n"],"mappings":";AA8BA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,OAAO,EAAE,EAAE;MAAE;MACbC,aAAa,EAAE,IAAI,CAAE;IACvB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP;IACA,MAAMC,YAAYA,CAAA,EAAG;MACnB,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMN,KAAK,CAACO,GAAG,CAAC,+BAA+B,CAAC;QACjE,IAAI,CAACL,OAAM,GAAII,QAAQ,CAACL,IAAI;MAC9B,EAAE,OAAOO,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD;IACF,CAAC;IACD;IACAE,UAAUA,CAACC,MAAM,EAAE;MACjB,IAAI,CAACR,aAAY,GAAI;QAAE,GAAGQ;MAAO,CAAC,EAAE;IACtC,CAAC;IACD;IACA,MAAMC,UAAUA,CAACD,MAAM,EAAE;MACvB,IAAI;QACF,MAAML,QAAO,GAAI,MAAMN,KAAK,CAACa,GAAG,CAC9B,iCAAiCF,MAAM,CAACG,EAAE,EAAE,EAC5C;UAAEC,MAAM,EAAE,IAAI,CAACZ,aAAa,CAACY;QAAO,CACtC,CAAC;QACD;QACA,IAAI,CAACb,OAAM,GAAI,IAAI,CAACA,OAAO,CAACc,GAAG,CAAEC,CAAC,IAChCA,CAAC,CAACH,EAAC,KAAMR,QAAQ,CAACL,IAAI,CAACa,EAAC,GAAIR,QAAQ,CAACL,IAAG,GAAIgB,CAC9C,CAAC;QACD,IAAI,CAACd,aAAY,GAAI,IAAI,EAAE;MAC7B,EAAE,OAAOK,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD;IACF,CAAC;IACD;IACAU,UAAUA,CAAA,EAAG;MACX,IAAI,CAACf,aAAY,GAAI,IAAI;IAC3B;EACF,CAAC;EACDgB,OAAOA,CAAA,EAAG;IACR;IACA,IAAI,CAACd,YAAY,CAAC,CAAC;EACrB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}